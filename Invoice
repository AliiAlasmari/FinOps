console.log('üîç Tabby Finance Application: started');

// Extract entity ID from URL
function getEntityId() {
  const match = window.location.pathname.match(/\/c\/(\d+)\/invoicing/);
  return match ? match[1] : null;
}

// Clear the close flag on any page refresh in this tab
window.addEventListener('load', () => {
  console.log('üîç Tabby Finance Application: Page loaded');
  sessionStorage.removeItem('wafeqToolClosed');
});

(function() {
  console.log('üîç Tabby Finance Application: Main function started');

  // Get current entity ID
  const entityId = getEntityId();
  if (!entityId) {
    console.error('‚ùå Could not determine entity ID from URL');
    return;
  }

  // API URL helper function
  function getApiUrl(endpoint) {
    return `https://app.wafeq.com/internal/v1/${entityId}/invoicing/${endpoint}`;
  }

  // ===== Enhanced UI Section =====
  const style = document.createElement("style");
  style.textContent = `
    @keyframes slideInRight {
      from { transform: translateX(100%); opacity: 0; }
      to { transform: translateX(0); opacity: 1; }
    }

    #hot-chili-panel {
      animation: slideInRight 0.4s ease-out;
      background: linear-gradient(135deg, #3FF0B0 0%, #14D3FF 100%) !important;
      transition: background 0.3s ease;
      position: relative;
      cursor: grab;
    }

    #hot-chili-panel.mode-coming-soon {
      background: linear-gradient(135deg, #FF3F9D 0%, #FF7214 100%) !important;
    }

    .mode-tabs-container {
      display: flex;
      align-items: center;
      background: rgba(255,255,255,0.18);
      border-radius: 18px;
      padding: 3px;
      width: 100%;
      max-width: 420px;
      margin: 0 auto 18px auto;
      position: relative;
      box-shadow: 0 2px 8px rgba(0,0,0,0.04);
      gap: 0;
    }
    .mode-tab {
      flex: 1 1 0;
      border-radius: 15px;
      font-weight: 600;
      cursor: pointer;
      font-size: 15px;
      padding: 8px 0;
      background: transparent;
      color: #131C26;
      border: none;
      outline: none;
      position: relative;
      z-index: 2;
      transition: color 0.2s;
      box-shadow: none;
      text-align: center;
    }
    .mode-tab.active {
      color: #fff;
    }
    .mode-tab:not(.active):hover {
      background: rgba(255,255,255,0.12);
    }
    .mode-tab-indicator {
      position: absolute;
      top: 3px;
      bottom: 3px;
      left: 3px;
      width: calc(50% - 6px);
      background: linear-gradient(135deg, #14D3FF 0%, #3FF0B0 100%);
      border-radius: 15px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.06);
      z-index: 1;
      transition: left 0.25s cubic-bezier(.4,1.4,.6,1), background 0.3s;
    }
    .mode-tab.active .notification-badge {
      background: #fff;
      color: #FF3F9D;
      box-shadow: 0 1px 4px rgba(0,0,0,0.08);
    }
    .notification-badge {
      display: inline-block;
      background: #FF3F9D;
      color: white;
      border-radius: 50%;
      width: 20px;
      height: 20px;
      font-size: 12px;
      line-height: 20px;
      text-align: center;
      margin-left: 5px;
      transition: background 0.2s, color 0.2s;
    }

    .mode-content {
      display: none !important;
    }

    .mode-content.active {
      display: block !important;
      animation: fadeIn 0.3s ease;
    }

    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }

    #hc-run:hover {
      background-color: #1a1a1a !important;
      transform: scale(1.03);
      transition: background-color 0.3s ease, transform 0.2s ease;
    }

    #hc-due::placeholder,
    #hc-min-amount::placeholder,
    #hc-max-amount::placeholder {
      color: #131C26 !important;
      opacity: 1 !important;
    }

    .switch {
      position: relative;
      display: inline-block;
      width: 40px;
      height: 22px;
    }

    .switch input {
      opacity: 0;
      width: 0;
      height: 0;
    }

    .slider {
      position: absolute;
      cursor: pointer;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: #999;
      transition: 0.4s;
      border-radius: 34px;
    }

    .slider:before {
      position: absolute;
      content: "";
      height: 16px;
      width: 16px;
      left: 3px;
      bottom: 3px;
      background-color: white;
      transition: 0.4s;
      border-radius: 50%;
    }

    input:checked + .slider {
      background: linear-gradient(135deg, #3BFFD9, #3BFFC8);
    }

    .mode-coming-soon input:checked + .slider {
      background: linear-gradient(135deg, #FF3F9D, #FF7214);
    }

    input:checked + .slider:before {
      transform: translateX(18px);
    }

    .progress-bar {
      width: 100%;
      height: 10px;
      background-color: #f0f0f0;
      border-radius: 5px;
      margin: 10px 0;
      overflow: hidden;
      display: none; /* Hide by default */
    }

    .progress-bar.visible {
      display: block; /* Show only when visible class is added */
    }

    .progress-bar-fill {
      height: 100%;
      background: linear-gradient(90deg, #3FF0B0, #14D3FF);
      width: 0%;
      transition: width 0.3s ease;
    }

    .mode-coming-soon .progress-bar-fill {
      background: linear-gradient(90deg, #FF3F9D, #FF7214);
    }

    .stats-badge {
      display: inline-block;
      padding: 3px 8px;
      border-radius: 12px;
      font-size: 12px;
      font-weight: 600;
      margin-right: 5px;
      background: rgba(255,255,255,0.25);
    }

    .amount-badge {
      background: rgba(255,255,255,0.35);
      font-weight: 700;
      color: #131C26;
    }

    .results-panel {
      margin-top: 10px;
      padding: 8px;
      background: rgba(255,255,255,0.15);
      border-radius: 12px;
      font-size: 12px;
      display: none; /* Hide by default */
    }

    .results-panel.visible {
      display: block; /* Show only when visible class is added */
    }

    .invoice-list-container {
      max-height: 150px;
      overflow-y: auto;
      margin: 8px 0;
      padding-right: 8px;
      border-radius: 8px;
    }

    .invoice-list-container::-webkit-scrollbar {
      width: 8px;
    }

    .invoice-list-container::-webkit-scrollbar-track {
      background: rgba(255,255,255,0.1);
      border-radius: 4px;
    }

    .invoice-list-container::-webkit-scrollbar-thumb {
      background: rgba(255,255,255,0.3);
      border-radius: 4px;
    }

    .invoice-list-container::-webkit-scrollbar-thumb:hover {
      background: rgba(255,255,255,0.4);
    }

    .invoice-item {
      padding: 4px 0;
      border-bottom: 1px solid rgba(255,255,255,0.1);
    }

    .invoice-item:last-child {
      border-bottom: none;
    }

    #hc-contact-suggestions-list {
      background: white;
      border: 1px solid #ccc;
      border-radius: 0 0 12px 12px;
      max-height: 160px;
      overflow-y: auto;
      position: absolute;
      width: 100%;
      left: 0;
      top: 100%;
      box-shadow: 0 2px 8px rgba(0,0,0,0.08);
      font-size: 14px;
    }

    .hc-contact-suggestion {
      padding: 8px;
      cursor: pointer;
    }

    .hc-contact-suggestion:hover {
      background: #f0f0f0;
    }

    .coming-soon-container {
      background: rgba(255,255,255,0.15);
      border-radius: 12px;
      padding: 20px;
      text-align: center;
      margin-top: 20px;
    }

    .coming-soon-icon {
      font-size: 40px;
      margin-bottom: 10px;
    }

    .feature-list {
      text-align: left;
      margin: 15px 0;
    }

    .feature-item {
      padding: 8px 0;
      display: flex;
      align-items: center;
    }

    .feature-item:before {
      content: "üîú";
      margin-right: 10px;
    }

    /* Analytics tab styles */
    .analytics-dashboard {
      padding: 18px 0 0 0;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 18px;
    }
    .analytics-charts {
      display: flex;
      flex-wrap: wrap;
      gap: 24px;
      justify-content: center;
      width: 100%;
    }
    .analytics-chart-box {
      background: rgba(255,255,255,0.18);
      border-radius: 16px;
      padding: 16px 18px 10px 18px;
      min-width: 180px;
      min-height: 180px;
      display: flex;
      flex-direction: column;
      align-items: center;
      box-shadow: 0 2px 8px rgba(0,0,0,0.04);
    }
    .analytics-key-stats {
      display: flex;
      gap: 24px;
      justify-content: center;
      margin-bottom: 8px;
      flex-wrap: wrap;
    }
    .analytics-stat {
      background: rgba(255,255,255,0.25);
      border-radius: 12px;
      padding: 8px 18px;
      font-weight: 600;
      font-size: 15px;
      color: #131C26;
      min-width: 120px;
      text-align: center;
    }
    .analytics-export-btn {
      margin-top: 10px;
      padding: 8px 18px;
      background: #131C26;
      color: #fff;
      border: none;
      border-radius: 12px;
      font-weight: 600;
      cursor: pointer;
      font-size: 14px;
      transition: background 0.2s;
    }
    .analytics-export-btn:hover {
      background: #14D3FF;
      color: #131C26;
    }
    /* Button styles for new flow */
    .hc-btn {
      width: 100%;
      padding: 10px;
      background: #131C26;
      color: white;
      border: none;
      border-radius: 12px;
      font-weight: 600;
      cursor: pointer;
      margin-top: 12px;
      font-size: 15px;
      transition: all 0.2s ease;
    }

    .hc-btn:hover {
      transform: scale(1.02);
      box-shadow: 0 2px 8px rgba(0,0,0,0.15);
    }

    .hc-btn-light {
      background: rgba(255,255,255,0.25);
      color: #131C26;
      font-weight: 500;
      font-size: 13px;
    }

    .hc-btn-light:hover {
      background: rgba(255,255,255,0.35);
    }

    .hc-btn-red {
      background: linear-gradient(135deg, #FFB6B6 0%, #FF7F7F 100%) !important;
      color: #fff !important;
      border: none;
    }

    .hc-btn-red:hover {
      background: linear-gradient(135deg, #FF9E9E 0%, #FF6B6B 100%) !important;
    }

    .hc-btn-row {
      display: flex;
      gap: 10px;
      margin-top: 12px;
    }
  `;
  document.head.appendChild(style);

  const wrapper = document.createElement("div");
  wrapper.innerHTML = `<div id="hot-chili-panel" style="position:fixed;top:20px;right:20px;z-index:9999;padding:20px;border-radius:20px;box-shadow:0 4px 12px rgba(0,0,0,0.15);font-family:Inter, Arial, -apple-system, system-ui;width:480px;max-width:98vw;font-size:14px;color:#131C26;background:linear-gradient(135deg, #3FF0B0 0%, #14D3FF 100%) !important;">
    <div id="hc-main-content">
    <div style="display:flex;align-items:center;justify-content:space-between;margin-bottom:14px;">
      <svg viewBox="0 0 130 40" width="126" height="40" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
        <path d="M125.49 7.88041L117.042 40.0008H110.615L112.717 32.0977H106.844L100.54 7.90098H107.419L112.882 31.5216L119.042 7.90098V7.88041H125.49ZM18.0709 11.3165V6.72818L4.59987 8.78573C8.39887 7.98329 10.5756 4.93811 10.5756 1.89294V0H3.75793V8.90918L0 9.50587V14.0942L3.75793 13.5181V15.6579L0.0205351 16.2341V20.6166L3.75793 20.0405V25.3078C3.98382 29.8962 7.00248 32.6327 11.9514 32.6327C13.7175 32.6327 15.4835 32.2623 17.1058 31.5628L17.1468 31.5422V25.8016L17.0647 25.8428C16.0995 26.316 15.0317 26.5629 13.9639 26.5629C11.664 26.5629 10.206 26.1926 10.206 24.3202V19.0323L18.0915 17.8184V13.4358L10.206 14.6497V12.5099L18.0709 11.3165ZM38.3596 8.95033L44.8077 7.96271V32.1389H38.3596V24.4437C38.1132 29.567 34.9303 32.6121 29.7349 32.6121C26.7573 32.6121 24.2931 31.4599 22.6297 29.2789C20.9664 27.0979 20.0834 23.9087 20.0834 20.0199C20.0834 16.1312 20.9664 12.942 22.6297 10.761C24.2931 8.57997 26.7573 7.42775 29.7349 7.42775C34.9303 7.42775 38.1132 10.4523 38.3596 15.5551V8.95033ZM38.7087 20.0199C38.7087 17.8184 38.1543 15.946 37.107 14.6086C36.0392 13.2506 34.499 12.5305 32.6714 12.5305C28.8929 12.5305 26.6341 15.3287 26.6341 20.0199C26.6341 24.7111 28.8929 27.4683 32.6714 27.4683C36.3472 27.4683 38.7087 24.5465 38.7087 20.0199ZM73.2899 20.0199C73.2899 27.9003 69.6757 32.6121 63.5973 32.6121C58.4019 32.6121 55.219 29.5875 54.9726 24.4437V32.1389H48.5245V1.91352L54.9726 0.925896V15.5551C55.219 10.4523 58.4019 7.42775 63.5973 7.42775C69.6757 7.42775 73.2899 12.1395 73.2899 20.0199ZM66.7187 20.0199C66.7187 15.3287 64.4598 12.5305 60.6813 12.5305C58.8537 12.5305 57.3136 13.2506 56.2457 14.6086C55.1984 15.9254 54.644 17.7978 54.644 20.0199C54.644 24.5465 57.0055 27.4683 60.6813 27.4683C64.4598 27.4683 66.7187 24.6906 66.7187 20.0199ZM100.519 20.0199C100.519 27.9003 96.9053 32.6121 90.8269 32.6121C85.6315 32.6121 82.4486 29.5875 82.2021 24.4437V32.1389H75.7747V1.91352L82.2227 0.925896V15.5551C82.4691 10.4523 85.652 7.42775 90.8474 7.42775C96.9053 7.42775 100.54 12.1395 100.519 20.0199ZM93.9482 20.0199C93.9482 15.3287 91.6894 12.5305 87.9109 12.5305C86.0833 12.5305 84.5432 13.2506 83.4753 14.6086C82.428 15.9254 81.8736 17.7978 81.8736 20.0199C81.8736 24.5465 84.2351 27.4683 87.9109 27.4683C91.6894 27.4683 93.9482 24.6906 93.9482 20.0199Z"/>
      </svg>
      <div style="display:flex;gap:5px;align-items:center;">
        <div id="invoice-count-badge" class="stats-badge">-</div>
        <div id="hc-loading-spinner" style="margin-left:12px;display:none;align-items:center;">
          <span class="hc-spinner" style="display:inline-block;width:22px;height:22px;border:3px solid #14D3FF;border-top:3px solid #3FF0B0;border-radius:50%;animation:hc-spin 1s linear infinite;"></span>
        </div>
      </div>
    </div>

    <!-- Modern pill switch tabs -->
    <div class="mode-tabs-container" id="mode-tabs-container">
      <div class="mode-tab-indicator" id="mode-tab-indicator"></div>
      <button id="mode-tab-invoicing" class="mode-tab active" type="button">Invoicing</button>
      <button id="mode-tab-analytics" class="mode-tab" type="button" title="Analytics" aria-label="Analytics">
        <span style="vertical-align:middle;display:inline-block;margin-right:6px;">
          <svg width="18" height="18" viewBox="0 0 20 20" fill="none" style="vertical-align:middle;">
            <rect x="2" y="10" width="3" height="8" rx="1.5" fill="#14D3FF"/>
            <rect x="8.5" y="5" width="3" height="13" rx="1.5" fill="#3FF0B0"/>
            <rect x="15" y="2" width="3" height="16" rx="1.5" fill="#FF3F9D"/>
          </svg>
        </span>Analytics
      </button>
      <button id="mode-tab-coming-soon" class="mode-tab" type="button">Coming Soon <span class="notification-badge">3</span></button>
    </div>

    <!-- Invoicing Mode Content -->
    <div id="mode-content-invoicing" class="mode-content active">
      <button id="export-invoices-btn" class="analytics-export-btn" style="float:right;position:absolute;top:18px;right:18px;z-index:10;">Export CSV</button>
      <div style="display:flex;justify-content:center;margin-bottom:10px;">
        <div id="invoice-amount-badge" class="stats-badge amount-badge" style="font-size:18px;padding:6px 18px;">AED 0.00</div>
      </div>

      <div style="display:flex;flex-direction:column;gap:10px;margin-bottom:12px;">
        <div style="display:flex;align-items:center;gap:10px;">
          <label for="hc-status-input" style="flex:0 0 110px;font-weight:600;">Status:</label>
          <div id="hc-status-dropdown-container" style="position:relative;flex:1;">
            <input type="text" id="hc-status-input" placeholder="Select status..." readonly style="width:100%;padding:8px 36px 8px 12px;background:white;border:1px solid #ccc;border-radius:12px;font-size:15px;color:#131C26;cursor:pointer;position:relative;z-index:1;" />
            <span id="hc-status-pill" style="display:none;position:absolute;left:12px;top:7px;background:#f5f6fa;border-radius:16px;padding:2px 10px 2px 10px;font-size:15px;font-weight:500;color:#333;max-width:80%;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;z-index:2;align-items:center;">
              <span id="hc-status-pill-label"></span>
              <span id="hc-status-pill-clear" style="margin-left:8px;cursor:pointer;font-size:16px;">&times;</span>
            </span>
            <div id="hc-status-dropdown" style="display:none;position:absolute;top:100%;left:0;width:100%;background:white;border:1px solid #ccc;border-radius:0 0 12px 12px;box-shadow:0 2px 8px rgba(0,0,0,0.08);z-index:1001;max-height:180px;overflow-y:auto;"></div>
            <input type="hidden" id="hc-status-value" value="" />
          </div>
        </div>
        <div style="display:flex;align-items:center;gap:10px;">
          <label for="hc-contact-name" style="flex:0 0 110px;font-weight:600;">Contact:</label>
          <div style="flex:1;">
            <input type="text" id="hc-contact-name" placeholder="Type to search contact" autocomplete="off" style="width:100%;padding:8px;background:white;border:1px solid #ccc;border-radius:12px;margin-bottom:0;color:#131C26;">
            <div id="hc-contact-suggestions" style="position:relative;z-index:1000;"></div>
            <input type="hidden" id="hc-contact-id">
          </div>
        </div>
        <div style="display:flex;align-items:center;gap:10px;">
          <label for="hc-due" style="flex:0 0 110px;font-weight:600;">From Due Date:</label>
          <input type="date" id="hc-due" placeholder="mm/dd/yyyy" style="flex:1;padding:8px;background:white;border:1px solid #ccc;border-radius:12px;color:#131C26;">
        </div>
        <div style="display:flex;align-items:center;gap:10px;">
          <label for="hc-to-due" style="flex:0 0 110px;font-weight:600;">To Due Date:</label>
          <input type="date" id="hc-to-due" placeholder="mm/dd/yyyy" style="flex:1;padding:8px;background:white;border:1px solid #ccc;border-radius:12px;color:#131C26;">
        </div>
        <div style="display:flex;align-items:center;gap:10px;">
          <label for="hc-min-amount" style="flex:0 0 110px;font-weight:600;">Min Amount:</label>
          <input type="number" id="hc-min-amount" min="0" step="0.01" placeholder="0.00" style="flex:1;padding:8px;background:white;border:1px solid #ccc;border-radius:12px;color:#131C26;">
        </div>
        <div style="display:flex;align-items:center;gap:10px;">
          <label for="hc-max-amount" style="flex:0 0 110px;font-weight:600;">Max Amount:</label>
          <input type="number" id="hc-max-amount" min="0" step="0.01" placeholder="No limit" style="flex:1;padding:8px;background:white;border:1px solid #ccc;border-radius:12px;color:#131C26;">
        </div>
        <div style="display:flex;align-items:center;justify-content:space-between;gap:10px;">
          <span style="font-weight:600;flex:0 0 110px;">Only Unsent</span>
          <label class="switch" style="margin-bottom:0;">
            <input type="checkbox" id="hc-unsent" checked>
            <span class="slider"></span>
          </label>
        </div>
      </div>

      <div class="progress-bar" id="hc-progress">
        <div class="progress-bar-fill" id="hc-progress-fill"></div>
      </div>

      <div class="results-panel" id="hc-results">
        <div style="font-weight:600;margin-bottom:5px;">Results:</div>
        <div id="hc-results-content">No operations run yet</div>
      </div>

      <button id="hc-check" style="width:100%;padding:8px;background:rgba(255,255,255,0.25);color:#131C26;border:none;border-radius:12px;font-weight:500;cursor:pointer;margin-top:8px;font-size:13px;transition:all 0.2s ease;">Check Matching Invoices</button>
      <button id="hc-pause" class="hc-btn hc-btn-light" style="display:none;">Pause</button>
      <button id="hc-cancel" class="hc-btn hc-btn-red" style="display:none;">Cancel</button>
      <button id="hc-run" style="width:100%;padding:10px;background:#131C26;color:white;border:none;border-radius:12px;font-weight:600;cursor:pointer;margin-top:12px;">SEND</button>
      <div id="hc-send-confirm-row" class="hc-btn-row" style="display:none;">
        <button id="hc-send-yes" class="hc-btn">YES</button>
        <button id="hc-send-no" class="hc-btn hc-btn-red">NO</button>
      </div>

      <button id="hc-close" style="position:absolute;top:10px;right:10px;background:none;border:none;color:#131C26;font-size:16px;cursor:pointer;padding:5px;border-radius:50%;width:25px;height:25px;display:flex;align-items:center;justify-content:center;">‚úï</button>
      <p style="font-size:11px;text-align:center;margin-top:8px;color:#333">Hold tight, we're creating financial freedom üöÄ</p>
    </div>

    <!-- Analytics Mode Content -->
    <div id="mode-content-analytics" class="mode-content">
      <div class="analytics-dashboard">
        <div class="analytics-key-stats" id="analytics-key-stats"></div>
        <div class="analytics-charts">
          <div class="analytics-chart-box">
            <div style="font-weight:600;margin-bottom:8px;">Status Breakdown</div>
            <svg id="analytics-pie-chart" width="140" height="140"></svg>
          </div>
          <div class="analytics-chart-box">
            <div style="font-weight:600;margin-bottom:8px;">Amounts by Status</div>
            <svg id="analytics-bar-chart" width="160" height="120"></svg>
          </div>
        </div>
        <button id="export-analytics-btn" class="analytics-export-btn">Export Analytics CSV</button>
      </div>
    </div>

    <!-- Coming Soon Mode Content -->
    <div id="mode-content-coming-soon" class="mode-content">
      <div class="coming-soon-container">
        <div class="coming-soon-icon">üöÄ</div>
        <h3 style="margin-top:0;margin-bottom:15px;color:#131C26;">Exciting Features Coming Soon!</h3>
        <p style="margin-bottom:15px;line-height:1.4;">We're working on powerful new features to make your financial management even better</p>
        <button style="padding:8px 16px;background:#131C26;color:white;border:none;border-radius:12px;font-weight:600;cursor:pointer;font-size:13px;margin-top:10px;">Join Waitlist</button>
      </div>
    </div>
  </div>`;

  // Prevent duplicate injection
  if (!document.getElementById('hot-chili-panel')) {
    document.body.appendChild(wrapper);
  }

  // Tab logic: always visible and robust switching
  const tabInvoicing = document.getElementById('mode-tab-invoicing');
  const tabAnalytics = document.getElementById('mode-tab-analytics');
  const tabComingSoon = document.getElementById('mode-tab-coming-soon');
  const indicator = document.getElementById('mode-tab-indicator');
  const tabsContainer = document.getElementById('mode-tabs-container');
  const tabContentMap = {
    [tabInvoicing && tabInvoicing.id]: document.getElementById('mode-content-invoicing'),
    [tabAnalytics && tabAnalytics.id]: document.getElementById('mode-content-analytics'),
    [tabComingSoon && tabComingSoon.id]: document.getElementById('mode-content-coming-soon'),
  };

  function updateTabIndicator() {
    const activeTab = tabsContainer.querySelector('.mode-tab.active');
    if (activeTab) {
      const containerRect = tabsContainer.getBoundingClientRect();
      const tabRect = activeTab.getBoundingClientRect();
      const left = tabRect.left - containerRect.left;
      indicator.style.left = left + 'px';
      indicator.style.width = tabRect.width + 'px';
      if (activeTab === tabComingSoon) {
        indicator.style.background = 'linear-gradient(135deg, #FF3F9D 0%, #FF7214 100%)';
      } else if (activeTab === tabAnalytics) {
        indicator.style.background = 'linear-gradient(135deg, #14D3FF 0%, #3FF0B0 100%)';
      } else {
        indicator.style.background = 'linear-gradient(135deg, #14D3FF 0%, #3FF0B0 100%)';
      }
    }
  }
  function activateTab(tab) {
    [tabInvoicing, tabAnalytics, tabComingSoon].forEach(t => t && t.classList.remove('active'));
    if (tab) tab.classList.add('active');
    Object.values(tabContentMap).forEach(c => { if (c) c.classList.remove('active'); });
    if (tab && tabContentMap[tab.id]) tabContentMap[tab.id].classList.add('active');
    const panel = document.getElementById('hot-chili-panel');
    if (panel) {
      if (tab === tabComingSoon) {
        panel.classList.add('mode-coming-soon');
      } else {
        panel.classList.remove('mode-coming-soon');
      }
    }
    updateTabIndicator();
  }
  tabInvoicing.addEventListener('click', function() {
    activateTab(tabInvoicing);
  });
  tabAnalytics.addEventListener('click', function() {
    activateTab(tabAnalytics);
    renderAnalytics();
  });
  tabComingSoon.addEventListener('click', function() {
    activateTab(tabComingSoon);
  });
  // On load and on resize, update indicator
  setTimeout(updateTabIndicator, 100);
  window.addEventListener('resize', updateTabIndicator);
  // Always show tabs bar
  tabsContainer.style.display = 'flex';

  // ===== Auto-fetch CSRF Token =====
  const tokenFromMeta = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
  const tokenFromCookie = document.cookie.split('; ').find(row => row.startsWith('csrftoken='))?.split('=')[1];
  let csrfToken = tokenFromMeta || tokenFromCookie || null;

  // CSRF error UI logic
  function showCsrfError() {
    let errorDiv = document.getElementById('csrf-error-message');
    if (!errorDiv) {
      errorDiv = document.createElement('div');
      errorDiv.id = 'csrf-error-message';
      errorDiv.style.cssText = 'background:#ffdddd;color:#a00;padding:12px 16px;border-radius:10px;margin-bottom:14px;font-weight:600;text-align:center;';
      const panel = document.getElementById('hc-main-content');
      if (panel) panel.insertBefore(errorDiv, panel.firstChild);
    }
    errorDiv.innerHTML = `‚ùå <b>CSRF Token missing</b>: Cannot process invoices. Please refresh the page or log in again.<br><button id="csrf-retry-btn" style="margin-top:8px;padding:6px 16px;border-radius:8px;border:none;background:#131C26;color:#fff;font-weight:600;cursor:pointer;">Retry</button>`;
    // Disable main action buttons
    const checkBtn = document.getElementById('hc-check');
    const sendBtn = document.getElementById('hc-run');
    if (checkBtn) checkBtn.disabled = true;
    if (sendBtn) sendBtn.disabled = true;
    // Retry logic
    document.getElementById('csrf-retry-btn').onclick = function() {
      // Try to re-fetch the token
      const tokenFromMeta = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
      const tokenFromCookie = document.cookie.split('; ').find(row => row.startsWith('csrftoken='))?.split('=')[1];
      csrfToken = tokenFromMeta || tokenFromCookie || null;
      if (csrfToken && csrfToken !== 'undefined') {
        errorDiv.remove();
        if (checkBtn) checkBtn.disabled = false;
        if (sendBtn) sendBtn.disabled = false;
      } else {
        errorDiv.innerHTML = `‚ùå <b>CSRF Token still missing</b>. Please try refreshing the page or logging in again.`;
      }
    };
  }

  if (!csrfToken || csrfToken === 'undefined') {
    showCsrfError();
    // Optionally stop the script here if you want:
    // return;
  }
  // ===== End of CSRF Token block =====

  // Panel drag functionality
  const panel = document.getElementById("hot-chili-panel");
  let offsetX = 0, offsetY = 0, isDragging = false;

  panel.addEventListener("mousedown", (e) => {
    if (e.target === document.getElementById("hc-close")) return;

    isDragging = true;
    offsetX = e.clientX - panel.getBoundingClientRect().left;
    offsetY = e.clientY - panel.getBoundingClientRect().top;
    panel.style.cursor = "grabbing";
  });

  document.addEventListener("mousemove", (e) => {
    if (!isDragging) return;
    panel.style.top = `${e.clientY - offsetY}px`;
    panel.style.right = "auto";
    panel.style.left = `${e.clientX - offsetX}px`;
  });

  document.addEventListener("mouseup", () => {
    isDragging = false;
    panel.style.cursor = "grab";
  });

  // Close button functionality
  document.getElementById("hc-close").addEventListener("click", () => {
    document.body.removeChild(wrapper);
    sessionStorage.setItem('wafeqToolClosed', '1');
  });

  // Format currency helper
  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'AED',
      minimumFractionDigits: 2
    }).format(amount);
  };

  // Status dropdown logic (must run after DOM elements exist)
  (function() {
    const statuses = [
      { label: 'Overdue', value: 'OVERDUE' },
      { label: 'Sent', value: 'SENT' },
      { label: 'Paid', value: 'PAID' },
      { label: 'Partially paid', value: 'PARTIALLY_PAID' },
      { label: 'Draft', value: 'DRAFT' },
      { label: 'Voided', value: 'VOIDED' }
    ];
    const input = document.getElementById('hc-status-input');
    const dropdown = document.getElementById('hc-status-dropdown');
    const pill = document.getElementById('hc-status-pill');
    const pillLabel = document.getElementById('hc-status-pill-label');
    const pillClear = document.getElementById('hc-status-pill-clear');
    const valueInput = document.getElementById('hc-status-value');
    function showDropdown() {
      dropdown.innerHTML = '';
      statuses.forEach(status => {
        const item = document.createElement('div');
        item.textContent = status.label;
        item.style.padding = '10px 12px';
        item.style.cursor = 'pointer';
        item.style.fontSize = '15px';
        item.onmouseenter = () => item.style.background = '#f0f0f0';
        item.onmouseleave = () => item.style.background = '';
        item.onclick = () => {
          valueInput.value = status.value;
          pillLabel.textContent = status.label;
          pill.style.display = 'inline-flex';
          input.value = '';
          input.placeholder = '';
          dropdown.style.display = 'none';
        };
        dropdown.appendChild(item);
      });
      dropdown.style.display = 'block';
    }
    input.addEventListener('click', showDropdown);
    input.addEventListener('focus', showDropdown);
    document.addEventListener('click', function(e) {
      if (!dropdown.contains(e.target) && e.target !== input && e.target !== pill && e.target !== pillLabel && e.target !== pillClear) {
        dropdown.style.display = 'none';
      }
    });
    pillClear.onclick = function() {
      valueInput.value = '';
      pill.style.display = 'none';
      input.placeholder = 'Select status...';
    };
    // Show pill if value is set (for reloads or programmatic set)
    if (valueInput.value) {
      const found = statuses.find(s => s.value === valueInput.value);
      if (found) {
        pillLabel.textContent = found.label;
        pill.style.display = 'inline-flex';
      }
    }
  })();

  // --- Button variables: define at the top so all functions can use them ---
  const checkBtn = document.getElementById('hc-check');
  const pauseBtn = document.getElementById('hc-pause');
  const cancelBtn = document.getElementById('hc-cancel');
  const sendBtn = document.getElementById('hc-run');
  const sendConfirmRow = document.getElementById('hc-send-confirm-row');
  const sendYesBtn = document.getElementById('hc-send-yes');
  const sendNoBtn = document.getElementById('hc-send-no');

  function setButtonClasses() {
    if (checkBtn) checkBtn.className = 'hc-btn hc-btn-light';
    if (pauseBtn) pauseBtn.className = 'hc-btn hc-btn-light';
    if (cancelBtn) cancelBtn.className = 'hc-btn hc-btn-red';
    if (sendBtn) sendBtn.className = 'hc-btn';
    if (sendYesBtn) sendYesBtn.className = 'hc-btn';
    if (sendNoBtn) sendNoBtn.className = 'hc-btn hc-btn-red';
  }
  function resetButtons() {
    checkBtn.style.display = '';
    pauseBtn.style.display = 'none';
    cancelBtn.style.display = 'none';
    sendBtn.style.display = 'none';
    sendConfirmRow.style.display = 'none';
    setButtonClasses();
  }
  function showFetchButtons() {
    checkBtn.style.display = 'none';
    pauseBtn.style.display = '';
    cancelBtn.style.display = '';
    sendBtn.style.display = 'none';
    sendConfirmRow.style.display = 'none';
    setButtonClasses();
  }
  function showSendButton() {
    checkBtn.style.display = 'none';
    pauseBtn.style.display = 'none';
    cancelBtn.style.display = 'none';
    sendBtn.style.display = '';
    sendConfirmRow.style.display = 'none';
  }
  function showCheckButton() {
    checkBtn.style.display = '';
    pauseBtn.style.display = 'none';
    cancelBtn.style.display = 'none';
    sendBtn.style.display = 'none';
    sendConfirmRow.style.display = 'none';
  }
  function showSendConfirm() {
    checkBtn.style.display = 'none';
    pauseBtn.style.display = 'none';
    cancelBtn.style.display = 'none';
    sendBtn.style.display = 'none';
    sendConfirmRow.style.display = 'flex';
  }
  // Initial state
  resetButtons();

  let isPaused = false;
  let isCancelled = false;
  pauseBtn.onclick = () => {
    if (!isPaused) {
      isPaused = true;
      pauseBtn.textContent = 'Resume';
    } else {
      isPaused = false;
      pauseBtn.textContent = 'Pause';
    }
  };
  cancelBtn.onclick = () => { isCancelled = true; };

  // --- Check Matching Invoices ---
  document.getElementById("hc-check").addEventListener("click", async () => {
    isPaused = false;
    isCancelled = false;
    pauseBtn.textContent = 'Pause';
    showFetchButtons();
    document.getElementById('hc-loading-spinner').style.display = 'flex';
    const amountBadge = document.getElementById("invoice-amount-badge");
    if (amountBadge) amountBadge.textContent = 'Calculating...';

    // Show progress bar and results panel only when checking
    const progressBar = document.getElementById("hc-progress");
    const progressFill = document.getElementById("hc-progress-fill");
    const resultsPanel = document.getElementById("hc-results");
    const resultsContent = document.getElementById("hc-results-content");
    
    if (progressBar) {
        progressBar.style.display = 'block';
        progressBar.classList.add('visible');
    }
    if (resultsPanel) {
        resultsPanel.style.display = 'block';
        resultsPanel.classList.add('visible');
    }
    
    resultsContent.innerHTML = "Starting search...";
    progressFill.style.width = "5%";

    // Gather filters
    const statusFilter = document.getElementById("hc-status-value").value;
    const onlyUnsent = document.getElementById("hc-unsent").checked;
    const fromDueDate = document.getElementById("hc-due").value;
    const toDueDate = document.getElementById("hc-to-due").value;
    const minAmount = parseFloat(document.getElementById("hc-min-amount").value || "0");
    const maxAmount = parseFloat(document.getElementById("hc-max-amount").value || "Infinity");
    const contactId = document.getElementById("hc-contact-id").value.trim();

    try {
      // Build query with correct server-side filters and pagination
      let queryParams = new URLSearchParams();
      const limit = 40;
      let offset = 0;
      queryParams.append('limit', limit.toString());
      queryParams.append('offset', offset.toString());
      if (statusFilter) queryParams.append('status__in', statusFilter.toUpperCase());
      if (onlyUnsent !== undefined) queryParams.append('is_sent', onlyUnsent ? 'false' : 'true');
      if (fromDueDate) queryParams.append('invoice_due_date_after', fromDueDate);
      if (toDueDate) queryParams.append('invoice_due_date_before', toDueDate);
      if (minAmount !== undefined && minAmount !== null && minAmount !== '' && isFinite(minAmount) && minAmount > 0) queryParams.append('amount_min', minAmount);
      if (maxAmount !== undefined && maxAmount !== null && maxAmount !== '' && isFinite(maxAmount)) queryParams.append('amount_max', maxAmount);
      if (contactId) queryParams.append('contact__in', contactId);

      const baseUrl = getApiUrl('invoices-flat/');
      // --- Batch parallel fetching ---
      let allInvoices = [];
      // First, get the total count and calculate total pages
      let countParams = new URLSearchParams(queryParams);
      countParams.set('limit', '1'); // Only for count request
      const countRes = await fetch(`${baseUrl}?${countParams.toString()}`, { headers: { "Accept": "application/json" }, credentials: "include" });
      const countData = await countRes.json();
      const totalInvoices = countData.count;
      const totalPages = Math.ceil(totalInvoices / limit);
      const pageUrls = [];
      for (let page = 0; page < totalPages; page++) {
        const pageQueryParams = new URLSearchParams(queryParams);
        pageQueryParams.set('offset', (page * limit).toString());
        pageUrls.push(`${baseUrl}?${pageQueryParams.toString()}`);
      }
      const batchSize = 25;
      for (let i = 0; i < pageUrls.length; i += batchSize) {
        if (isCancelled) {
          resultsContent.innerHTML = "‚ùå Fetching cancelled by user.";
          break;
        }
        while (isPaused) {
          // Always keep progress bar and results panel visible while paused
          progressBar.classList.add('visible');
          resultsPanel.classList.add('visible');
          if (!resultsContent.innerHTML.includes('Paused...')) {
            resultsContent.innerHTML += "<br><span style='color:#FFA500;font-weight:600;'>Paused...</span>";
          }
          await new Promise(r => setTimeout(r, 200));
          if (isCancelled) {
            resultsContent.innerHTML = "‚ùå Fetching cancelled by user.";
            break;
          }
        }
        // Remove 'Paused...' message if resuming
        if (resultsContent.innerHTML.includes('Paused...')) {
          resultsContent.innerHTML = resultsContent.innerHTML.replace(/<br><span style='color:#FFA500;font-weight:600;'>Paused\.\.\.<\/span>/g, '');
        }
        const batch = pageUrls.slice(i, i + batchSize);
        const fetchPromises = batch.map(url =>
          fetch(url, { headers: { "Accept": "application/json" }, credentials: "include" })
            .then(res => res.json())
            .then(data => data.results)
        );
        const batchResults = await Promise.all(fetchPromises);
        batchResults.forEach(results => {
          allInvoices = allInvoices.concat(results);
        });
        // Update progress bar and results after each batch
        progressFill.style.width = `${Math.round(((i + batch.length) / pageUrls.length) * 100)}%`;
        resultsPanel.classList.add('visible');
        resultsPanel.style.display = '';
        resultsContent.innerHTML = `Fetched: ${allInvoices.length} invoices...`;
        // Force UI update
        await new Promise(r => setTimeout(r, 0));
      }
      // Deduplicate invoices by ID after fetching all batches
      const uniqueInvoicesMap = new Map();
      allInvoices.forEach(inv => {
        if (!uniqueInvoicesMap.has(inv.id)) {
          uniqueInvoicesMap.set(inv.id, inv);
        }
      });
      const uniqueInvoices = Array.from(uniqueInvoicesMap.values());
      // Store for analytics/export
      window.filteredInvoicesForExport = uniqueInvoices;

      // --- Contact email/name lookup using id__in batching ---
      const contactIds = [...new Set(uniqueInvoices.map(inv => inv.contact))];
      const contactEmailMap = {};
      const contactNameMap = {};
      const contactBatchSize = 40;
      for (let i = 0; i < contactIds.length; i += contactBatchSize) {
        const batch = contactIds.slice(i, i + contactBatchSize);
        const url = getApiUrl(`contacts/?id__in=${batch.join(",")}`);
        try {
          const res = await fetch(url, { headers: { "Accept": "application/json" }, credentials: "include" });
          const data = await res.json();
          data.results.forEach(contact => {
            let email = contact.email && contact.email.trim();
            if (!email && contact.persons && contact.persons.length > 0) {
              email = contact.persons.find(p => p.email && p.email.trim() !== "")?.email.trim() || "";
            }
            contactEmailMap[contact.id] = email;
            contactNameMap[contact.id] = contact.name || '';
          });
        } catch (e) {
          console.warn("‚ö†Ô∏è Failed to fetch contact batch", e);
        }
      }
      // Store for export
      window.lastContactEmailMap = contactEmailMap;
      window.lastContactNameMap = contactNameMap;

      // Only keep invoices whose contact has a non-empty email
      const invoicesWithEmail = uniqueInvoices.filter(inv => {
        const email = contactEmailMap[inv.contact];
        return email && email !== "";
      });
      const invoicesWithoutEmail = uniqueInvoices.length - invoicesWithEmail.length;

      // --- Apply email template to invoices missing it ---
      const currentEntityId = getEntityId();
      const templateId = currentEntityId === "1686" ? 10 : 8;
      
      const invoicesToUpdate = invoicesWithEmail.filter(inv => !inv.email_template).map(inv => ({ id: inv.id, email_template: templateId }));
      if (invoicesToUpdate.length > 0) {
        resultsContent.innerHTML = `Applying email template to ${invoicesToUpdate.length} invoices...`;
        try {
          const patchRes = await fetch(getApiUrl("invoice-properties/update/"), {
            method: "PATCH",
            headers: {
              "Content-Type": "application/json",
              "Accept": "application/json",
              "x-csrftoken": csrfToken
            },
            credentials: "include",
            body: JSON.stringify(invoicesToUpdate)
          });
          if (!patchRes.ok) throw new Error("Failed to apply templates");
          invoicesWithEmail.forEach(inv => { if (!inv.email_template) inv.email_template = templateId; });
        } catch (e) {
          resultsContent.innerHTML = "‚ùå Error applying email templates. See console for details.";
          throw e;
        }
      }

      // Calculate total for invoices ready to send
      const totalReadyAmount = invoicesWithEmail.reduce((sum, inv) => sum + (inv.amount || 0), 0);

      // Update UI
      const countBadge = document.getElementById("invoice-count-badge");
      if (countBadge) countBadge.textContent = `${invoicesWithEmail.length} Invoices`;
      if (amountBadge) amountBadge.textContent = totalReadyAmount === 0 ? 'AED 0.00' : formatCurrency(totalReadyAmount);

      let emailNote = "";
      if (invoicesWithoutEmail > 0) {
        emailNote = `<br><span style='color:#d9534f;font-weight:600;'>${invoicesWithoutEmail} invoices excluded (no contact email)</span>`;
      }

      resultsContent.innerHTML = `
        <div style="line-height:1.7;">
          <span style="font-weight:600; color:#131C26;">Fetched:</span> <b>${uniqueInvoices.length}</b><br>
          <span style="font-weight:600; color:#131C26;">Excluded (No Email):</span> <b>${invoicesWithoutEmail}</b><br>
          <span style="font-weight:600; color:#131C26;">Ready to Send:</span> <b>${invoicesWithEmail.length}</b><br>
          <span style="font-weight:600; color:#131C26;">Total Amount:</span> <b>${formatCurrency(totalReadyAmount)}</b>
          ${emailNote}
        </div>
      `;

      // Show/hide buttons based on results
      if (invoicesWithEmail.length > 0) {
        showSendButton();
      } else {
        showCheckButton();
      }
    } finally {
      document.getElementById('hc-loading-spinner').style.display = 'none'; // Hide spinner
    }
  });

  // Store original panel content for modal restoration
  let originalPanelHTML = null;

  // Helper to re-initialize tab event listeners after restoring panel HTML
  function reinitTabListeners() {
    const tabInvoicing = document.getElementById('mode-tab-invoicing');
    const tabAnalytics = document.getElementById('mode-tab-analytics');
    const tabComingSoon = document.getElementById('mode-tab-coming-soon');
    const indicator = document.getElementById('mode-tab-indicator');
    const tabsContainer = document.getElementById('mode-tabs-container');
    function updateTabIndicator() {
      const activeTab = tabsContainer.querySelector('.mode-tab.active');
      if (activeTab) {
        const containerRect = tabsContainer.getBoundingClientRect();
        const tabRect = activeTab.getBoundingClientRect();
        const left = tabRect.left - containerRect.left;
        indicator.style.left = left + 'px';
        indicator.style.width = tabRect.width + 'px';
        if (activeTab === tabComingSoon) {
          indicator.style.background = 'linear-gradient(135deg, #FF3F9D 0%, #FF7214 100%)';
        } else if (activeTab === tabAnalytics) {
          indicator.style.background = 'linear-gradient(135deg, #14D3FF 0%, #3FF0B0 100%)';
        } else {
          indicator.style.background = 'linear-gradient(135deg, #14D3FF 0%, #3FF0B0 100%)';
        }
      }
    }
    tabInvoicing.addEventListener('click', function() {
      tabInvoicing.classList.add('active');
      tabAnalytics.classList.remove('active');
      tabComingSoon.classList.remove('active');
      document.getElementById('mode-content-invoicing').classList.add('active');
      document.getElementById('mode-content-analytics').classList.remove('active');
      document.getElementById('mode-content-coming-soon').classList.remove('active');
      document.getElementById('hot-chili-panel').classList.remove('mode-coming-soon');
      updateTabIndicator();
    });
    tabAnalytics.addEventListener('click', function() {
      tabAnalytics.classList.add('active');
      tabInvoicing.classList.remove('active');
      tabComingSoon.classList.remove('active');
      document.getElementById('mode-content-analytics').classList.add('active');
      document.getElementById('mode-content-invoicing').classList.remove('active');
      document.getElementById('mode-content-coming-soon').classList.remove('active');
      document.getElementById('hot-chili-panel').classList.remove('mode-coming-soon');
      updateTabIndicator();
      if (typeof renderAnalytics === 'function') renderAnalytics();
    });
    tabComingSoon.addEventListener('click', function() {
      tabComingSoon.classList.add('active');
      tabInvoicing.classList.remove('active');
      tabAnalytics.classList.remove('active');
      document.getElementById('mode-content-coming-soon').classList.add('active');
      document.getElementById('mode-content-invoicing').classList.remove('active');
      document.getElementById('mode-content-analytics').classList.remove('active');
      document.getElementById('hot-chili-panel').classList.add('mode-coming-soon');
      updateTabIndicator();
    });
    setTimeout(updateTabIndicator, 100);
    window.addEventListener('resize', updateTabIndicator);
  }

  function showSendConfirmationPanel(invoiceCount) {
    const panel = document.getElementById('hot-chili-panel');
    // Save original panel content if not already saved
    if (!originalPanelHTML) originalPanelHTML = panel.innerHTML;
    // Replace panel content with modal container
    panel.innerHTML = '';
    // Modal container with same gradient, border radius, shadow
    const modalContainer = document.createElement('div');
    modalContainer.style.cssText = `
      width: 100%; height: 100%; min-height: 420px;
      display: flex; align-items: center; justify-content: center;
      background: linear-gradient(135deg, #3FF0B0 0%, #14D3FF 100%) !important;
      /* No extra border radius or shadow, only panel's */
      position: relative;
    `;
    // Modal content
    const conf = document.createElement('div');
    conf.id = 'hc-confirmation-panel';
    conf.className = 'confirmation-panel';
    conf.style.cssText = `
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      width: 100%;
      max-width: 420px;
      background: none;
      padding: 0 24px;
    `;
    conf.innerHTML = `
      <h3 style="margin:0 0 12px 0;color:#131C26;font-size:2em;">Confirm Bulk Send</h3>
      <div style="font-size:18px;margin-bottom:18px;color:#222;">Are you sure you want to send <b>${invoiceCount}</b> invoices?<br><span style='color:#d9534f;font-weight:600;'>This action cannot be undone.</span></div>
      <div style="display:flex;gap:18px;justify-content:center;margin-top:18px;width:100%;max-width:340px;">
        <button id="hc-confirm-yes" style="flex:1;padding:16px 0;background:#131C26;color:#fff;border:none;border-radius:16px;font-weight:700;font-size:18px;cursor:pointer;">YES</button>
        <button id="hc-confirm-no" style="flex:1;padding:16px 0;background:linear-gradient(135deg,#FFB6B6 0%,#FF7F7F 100%);color:#fff;border:none;border-radius:16px;font-weight:700;font-size:18px;cursor:pointer;">NO</button>
      </div>
    `;
    modalContainer.appendChild(conf);
    panel.appendChild(modalContainer);
    // Button logic
    document.getElementById('hc-confirm-no').onclick = () => {
      // Restore original panel content
      panel.innerHTML = originalPanelHTML;
      originalPanelHTML = null;
      reinitTabListeners();
    };
    document.getElementById('hc-confirm-yes').onclick = async () => {
      conf.innerHTML = `<div style='font-size:54px;margin-bottom:18px;'>‚è≥</div><div style='font-size:20px;font-weight:600;'>Sending invoices...</div>`;
      await sendInvoicesAfterConfirm();
      panel.innerHTML = originalPanelHTML;
      originalPanelHTML = null;
      reinitTabListeners();
    };
  }

  // --- SEND button logic ---
  sendBtn.onclick = () => {
    // Use the invoices already fetched and stored
    const invoices = window.filteredInvoicesForExport || [];
    const contactEmailMap = window.lastContactEmailMap || {};
    if (!invoices.length) {
      alert("No invoices to send. Please check invoices first.");
      return;
    }
    // Only send invoices with email
    const invoicesWithEmail = invoices.filter(inv => {
      const email = contactEmailMap[inv.contact];
      return email && email !== "";
    });
    if (!invoicesWithEmail.length) {
      alert("No invoices with contact emails to send.");
      return;
    }
    showSendConfirmationPanel(invoicesWithEmail.length);
  };

  // Contact name input functionality (ensure input and suggestion container exist)
  const nameInput = document.getElementById('hc-contact-name');
  const idInput = document.getElementById('hc-contact-id');
  const suggestionsDiv = document.getElementById('hc-contact-suggestions');
  let lastFetch = 0;
  let lastValue = '';
  let suggestionsList = null;
  if (nameInput && suggestionsDiv) {
    nameInput.addEventListener('input', async function() {
      const value = nameInput.value.trim();
      idInput.value = '';
      if (value.length < 2) { if (suggestionsList) suggestionsList.remove(); return; }
      lastValue = value;
      lastFetch = Date.now();
      const fetchTime = lastFetch;
      const url = getApiUrl(`contacts/?limit=10&offset=0&keyword=${encodeURIComponent(value)}`);
      try {
        const res = await fetch(url, { headers: { "Accept": "application/json" }, credentials: "include" });
        const data = await res.json();
        if (lastValue !== value || fetchTime !== lastFetch) return;
        if (suggestionsList) suggestionsList.remove();
        suggestionsList = document.createElement('div');
        suggestionsList.id = 'hc-contact-suggestions-list';
        data.results.forEach(contact => {
          const item = document.createElement('div');
          item.className = 'hc-contact-suggestion';
          item.textContent = contact.name + (contact.id ? ` (#${contact.id})` : '');
          item.onclick = () => {
            nameInput.value = contact.name;
            idInput.value = contact.id;
            suggestionsList.remove();
          };
          suggestionsList.appendChild(item);
        });
        if (data.results.length === 0) {
          const item = document.createElement('div');
          item.className = 'hc-contact-suggestion';
          item.textContent = 'No contacts found';
          suggestionsList.appendChild(item);
        }
        suggestionsDiv.appendChild(suggestionsList);
      } catch (e) {
        if (suggestionsList) suggestionsList.remove();
      }
    });
    document.addEventListener('click', function(e) {
      if (!suggestionsDiv.contains(e.target) && e.target !== nameInput) {
        if (suggestionsList) suggestionsList.remove();
      }
    });
  }

  // --- Export CSV logic ---
  function exportToCSV(data, filename) {
    if (!data.length) return;
    // Use a custom header order and ALL CAPS
    const headerOrder = [
      'id',
      'number',
      'status',
      'amount',
      'due_date',
      'sent_date',
      'paid_date',
      'contact',
      'is_sent',
      'is_paid',
      'currency',
      'created_at',
      'updated_at',
      'email_template',
      'contact_name',
      'contact_email',
      'has_contact_email',
    ];
    const headerNames = [
      'ID',
      'INVOICE NUMBER',
      'STATUS',
      'AMOUNT',
      'DUE DATE',
      'SENT DATE',
      'PAID DATE',
      'CONTACT',
      'IS SENT',
      'IS PAID',
      'CURRENCY',
      'CREATED AT',
      'UPDATED AT',
      'EMAIL TEMPLATE',
      'CONTACT NAME',
      'CONTACT EMAIL',
      'HAS CONTACT EMAIL',
    ];
    const csvRows = [];
    csvRows.push(headerNames.join(','));
    for (const row of data) {
      csvRows.push(headerOrder.map(key => '"' + String(row[key] ?? '').replace(/"/g, '""') + '"').join(','));
    }
    const csvString = csvRows.join('\n');
    const blob = new Blob([csvString], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    setTimeout(() => { document.body.removeChild(a); URL.revokeObjectURL(url); }, 100);
  }
  // Export filtered invoices from Invoicing tab
  document.getElementById('export-invoices-btn').addEventListener('click', function() {
    if (window.filteredInvoicesForExport && window.filteredInvoicesForExport.length) {
      // Try to get contact email/name maps if available
      const contactEmailMap = window.lastContactEmailMap || {};
      const contactNameMap = window.lastContactNameMap || {};
      const mapped = window.filteredInvoicesForExport.map(inv => mapInvoiceForExport(inv, contactEmailMap, contactNameMap));
      exportToCSV(mapped, 'invoices_export.csv');
    } else {
      alert('No filtered invoices to export yet. Please check invoices first.');
    }
  });
  // Export analytics data
  document.getElementById('export-analytics-btn').addEventListener('click', function() {
    if (window.filteredInvoicesForExport && window.filteredInvoicesForExport.length) {
      const contactEmailMap = window.lastContactEmailMap || {};
      const contactNameMap = window.lastContactNameMap || {};
      const mapped = window.filteredInvoicesForExport.map(inv => mapInvoiceForExport(inv, contactEmailMap, contactNameMap));
      exportToCSV(mapped, 'analytics_export.csv');
    } else {
      alert('No filtered invoices to export yet. Please check invoices first.');
    }
  });

  // --- Analytics rendering logic ---
  function renderAnalytics() {
    // Use the last filtered invoices if available, else show a message
    const invoices = window.filteredInvoicesForExport || [];
    const keyStatsDiv = document.getElementById('analytics-key-stats');
    const pieChart = document.getElementById('analytics-pie-chart');
    const barChart = document.getElementById('analytics-bar-chart');
    if (!keyStatsDiv || !pieChart || !barChart) return; // Null check
    if (!invoices.length) {
      keyStatsDiv.innerHTML = '<div class="analytics-stat">No data yet.<br>Check invoices first.</div>';
      pieChart.innerHTML = '';
      barChart.innerHTML = '';
      window.analyticsDataForExport = [];
      return;
    }
    // Key stats
    const total = invoices.length;
    const totalAmount = invoices.reduce((sum, inv) => sum + (Number(inv.amount) || 0), 0);
    const overdue = invoices.filter(inv => inv.status && inv.status.toUpperCase() === 'OVERDUE').length;
    const paid = invoices.filter(inv => inv.status && inv.status.toUpperCase() === 'PAID').length;
    const sent = invoices.filter(inv => inv.status && inv.status.toUpperCase() === 'SENT').length;
    keyStatsDiv.innerHTML = `
      <div class="analytics-stat">Total: <b>${total}</b></div>
      <div class="analytics-stat">Overdue: <b>${overdue}</b></div>
      <div class="analytics-stat">Paid: <b>${paid}</b></div>
      <div class="analytics-stat">Sent: <b>${sent}</b></div>
      <div class="analytics-stat">Total Amount: <b>${formatCurrency(totalAmount)}</b></div>
    `;
    // Pie chart data
    const statusCounts = {};
    invoices.forEach(inv => {
      const s = (inv.status || 'Unknown').toUpperCase();
      statusCounts[s] = (statusCounts[s] || 0) + 1;
    });
    const pieData = Object.entries(statusCounts);
    // Pie chart rendering (SVG)
    let totalPie = pieData.reduce((sum, d) => sum + d[1], 0);
    let startAngle = 0;
    const colors = ['#14D3FF','#3FF0B0','#FF3F9D','#FF7214','#FFD700','#999'];
    pieChart.innerHTML = '';
    pieData.forEach(([label, value], i) => {
      const angle = (value / totalPie) * 2 * Math.PI;
      const endAngle = startAngle + angle;
      const x1 = 70 + 60 * Math.cos(startAngle);
      const y1 = 70 + 60 * Math.sin(startAngle);
      const x2 = 70 + 60 * Math.cos(endAngle);
      const y2 = 70 + 60 * Math.sin(endAngle);
      const largeArc = angle > Math.PI ? 1 : 0;
      const pathData = `M70,70 L${x1},${y1} A60,60 0 ${largeArc} 1 ${x2},${y2} Z`;
      const path = document.createElementNS('http://www.w3.org/2000/svg','path');
      path.setAttribute('d', pathData);
      path.setAttribute('fill', colors[i%colors.length]);
      pieChart.appendChild(path);
      startAngle = endAngle;
    });
    // Pie chart legend
    let legendY = 18;
    pieData.forEach(([label, value], i) => {
      const rect = document.createElementNS('http://www.w3.org/2000/svg','rect');
      rect.setAttribute('x', 5);
      rect.setAttribute('y', legendY);
      rect.setAttribute('width', 12);
      rect.setAttribute('height', 12);
      rect.setAttribute('fill', colors[i%colors.length]);
      pieChart.appendChild(rect);
      const text = document.createElementNS('http://www.w3.org/2000/svg','text');
      text.setAttribute('x', 22);
      text.setAttribute('y', legendY+11);
      text.setAttribute('font-size', '12');
      text.setAttribute('fill', '#131C26');
      text.textContent = `${label} (${value})`;
      pieChart.appendChild(text);
      legendY += 16;
    });
    // Bar chart data
    const statusAmounts = {};
    invoices.forEach(inv => {
      const s = (inv.status || 'Unknown').toUpperCase();
      statusAmounts[s] = (statusAmounts[s] || 0) + (Number(inv.amount) || 0);
    });
    const barData = Object.entries(statusAmounts);
    // Bar chart rendering (SVG)
    barChart.innerHTML = '';
    const maxAmount = Math.max(...barData.map(d => d[1]), 1);
    const barWidth = 22;
    barData.forEach(([label, value], i) => {
      const x = 18 + i * (barWidth + 12);
      const h = Math.round((value / maxAmount) * 70);
      const y = 100 - h;
      const rect = document.createElementNS('http://www.w3.org/2000/svg','rect');
      rect.setAttribute('x', x);
      rect.setAttribute('y', y);
      rect.setAttribute('width', barWidth);
      rect.setAttribute('height', h);
      rect.setAttribute('fill', colors[i%colors.length]);
      barChart.appendChild(rect);
      const text = document.createElementNS('http://www.w3.org/2000/svg','text');
      text.setAttribute('x', x + barWidth/2);
      text.setAttribute('y', 115);
      text.setAttribute('font-size', '12');
      text.setAttribute('fill', '#131C26');
      text.setAttribute('text-anchor', 'middle');
      text.textContent = label;
      barChart.appendChild(text);
    });
    // Export analytics data
    window.analyticsDataForExport = barData.map(([status, amount]) => ({ status, amount }));
  }

  // --- Enhanced Export Mapping ---
  function mapInvoiceForExport(inv, contactEmailMap, contactNameMap) {
    function fmtDate(d) {
      if (!d) return '';
      const date = new Date(d);
      if (isNaN(date)) return d;
      return date.toISOString().slice(0,10);
    }
    const email = (contactEmailMap && contactEmailMap[inv.contact]) || '';
    return {
      id: inv.id || '',
      number: inv.invoice_number || '',
      status: inv.status || '',
      amount: (typeof inv.amount === 'number' ? inv.amount.toFixed(2) : inv.amount) || '',
      due_date: fmtDate(inv.invoice_due_date),
      sent_date: '', // Not available in API response
      paid_date: '', // Not available in API response
      contact: inv.contact || '',
      is_sent: inv.is_sent,
      is_paid: inv.is_paid !== undefined ? inv.is_paid : (inv.status && inv.status.toUpperCase() === 'PAID' ? true : false),
      currency: inv.currency || 'AED',
      created_at: fmtDate(inv.created_ts),
      updated_at: fmtDate(inv.modified_ts),
      email_template: inv.email_template || '',
      contact_name: (contactNameMap && contactNameMap[inv.contact]) || '',
      contact_email: email,
      has_contact_email: (email && email.includes('@')) ? 'Yes' : 'No',
    };
  }

  // --- SEND button logic ---
  async function sendInvoicesAfterConfirm() {
    const invoices = window.filteredInvoicesForExport || [];
    const contactEmailMap = window.lastContactEmailMap || {};
    const resultsContent = document.getElementById("hc-results-content");
    if (!invoices.length) {
      if (resultsContent) resultsContent.innerHTML = "‚ùå No invoices to send. Please check invoices first.";
      return;
    }
    const invoicesWithEmail = invoices.filter(inv => {
      const email = contactEmailMap[inv.contact];
      return email && email !== "";
    });
    if (!invoicesWithEmail.length) {
      if (resultsContent) resultsContent.innerHTML = "‚ùå No invoices with contact emails to send.";
      return;
    }
    // UI progress setup
    const total = invoicesWithEmail.length;
    const batchSendSize = 1000;
    const totalBatches = Math.ceil(total / batchSendSize);
    let totalQueued = 0;
    let totalFailed = 0;
    let currentBatch = 0;
    let sentResults = [];
    // Progress bar
    let progressBar = document.getElementById('hc-send-progress-bar');
    if (!progressBar) {
      progressBar = document.createElement('div');
      progressBar.id = 'hc-send-progress-bar';
      progressBar.style.cssText = 'width:100%;height:16px;background:#eee;border-radius:8px;margin:12px 0;overflow:hidden;';
      const fill = document.createElement('div');
      fill.id = 'hc-send-progress-fill';
      fill.style.cssText = 'height:100%;width:0%;background:linear-gradient(90deg,#3FF0B0,#14D3FF);transition:width 0.3s;';
      progressBar.appendChild(fill);
      if (resultsContent) resultsContent.parentNode.insertBefore(progressBar, resultsContent);
    }
    const fill = document.getElementById('hc-send-progress-fill');
    // Progress info
    let progressInfo = document.getElementById('hc-send-progress-info');
    if (!progressInfo) {
      progressInfo = document.createElement('div');
      progressInfo.id = 'hc-send-progress-info';
      progressInfo.style.cssText = 'margin-bottom:8px;font-size:15px;font-weight:500;';
      if (resultsContent) resultsContent.parentNode.insertBefore(progressInfo, progressBar);
    }
    // Spinner
    const spinner = document.getElementById('hc-loading-spinner');
    if (spinner) spinner.style.display = 'flex';
    // Live update function
    function updateProgressUI() {
      if (progressInfo) progressInfo.innerHTML = `
        Total: <b>${total}</b> | Batches: <b>${totalBatches}</b> | Current: <b>${currentBatch}/${totalBatches}</b><br>
        Queued: <b>${totalQueued}</b> | Failed: <b>${totalFailed}</b>
      `;
      if (fill) fill.style.width = `${Math.round((totalQueued + totalFailed) / total * 100)}%`;
    }
    updateProgressUI();
    // Sending loop
    for (let i = 0; i < invoicesWithEmail.length; i += batchSendSize) {
      currentBatch = Math.floor(i / batchSendSize) + 1;
      const batch = invoicesWithEmail.slice(i, i + batchSendSize);
      const batchIds = batch.map(inv => inv.id);
      try {
        const sendRes = await fetch(getApiUrl("invoices/send/"), {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "Accept": "application/json",
            "x-csrftoken": csrfToken
          },
          credentials: "include",
          body: JSON.stringify({ invoice_ids: batchIds })
        });
        let batchSuccess = 0;
        let batchFail = 0;
        if (sendRes.ok) {
          const sendData = await sendRes.json();
          batchSuccess = sendData.queued || batch.length;
          batchFail = batch.length - batchSuccess;
          totalQueued += batchSuccess;
          totalFailed += batchFail;
          // Mark results for export
          batch.forEach(inv => sentResults.push({
            id: inv.id,
            invoice_number: inv.invoice_number,
            status: sendData.queued ? 'Sent' : 'Unknown',
            contact: inv.contact,
            amount: inv.amount,
            result: batchSuccess ? 'Sent' : 'Failed'
          }));
        } else {
          totalFailed += batch.length;
          batch.forEach(inv => sentResults.push({
            id: inv.id,
            invoice_number: inv.invoice_number,
            status: 'Failed',
            contact: inv.contact,
            amount: inv.amount,
            result: 'Failed'
          }));
        }
      } catch (error) {
        totalFailed += batch.length;
        batch.forEach(inv => sentResults.push({
          id: inv.id,
          invoice_number: inv.invoice_number,
          status: 'Failed',
          contact: inv.contact,
          amount: inv.amount,
          result: 'Failed'
        }));
        const resultsContent = document.getElementById("hc-results-content");
        if (resultsContent) resultsContent.innerHTML = `<div style='color:#d9534f;font-weight:600;'>‚ùå Error sending some invoices. See console for details.</div>`;
      }
      updateProgressUI();
      // Delay between batches
      await new Promise(res => setTimeout(res, 500));
    }
    // Show results
    if (resultsContent) resultsContent.innerHTML = `
      <div style="line-height:1.7;">
        <span style="font-weight:600; color:#131C26;">Queued to Send:</span> <b>${totalQueued}</b><br>
        <span style="font-weight:600; color:#d9534f;">Failed to Queue:</span> <b>${totalFailed}</b><br>
        <button id="hc-export-send-results" style="margin-top:12px;padding:8px 18px;background:#131C26;color:#fff;border:none;border-radius:12px;font-weight:600;cursor:pointer;font-size:14px;">Export Send Results CSV</button>
        <div style='margin-top:10px;color:#28a745;font-weight:600;'>‚úÖ Sending complete!</div>
      </div>
    `;
    // Export CSV logic
    const exportBtn = document.getElementById('hc-export-send-results');
    if (exportBtn) {
      exportBtn.onclick = function() {
        if (!sentResults.length) return;
        const header = ['id','invoice_number','status','contact','amount','result'];
        const csvRows = [header.join(',')];
        sentResults.forEach(row => {
          csvRows.push(header.map(key => '"' + String(row[key] ?? '').replace(/"/g, '""') + '"').join(','));
        });
        const csvString = csvRows.join('\n');
        const blob = new Blob([csvString], { type: 'text/csv' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'send_results.csv';
        document.body.appendChild(a);
        a.click();
        setTimeout(() => { document.body.removeChild(a); URL.revokeObjectURL(url); }, 100);
      };
    }
    // Hide spinner
    if (spinner) spinner.style.display = 'none';
    // Update analytics if possible
    if (typeof renderAnalytics === 'function') renderAnalytics();
  }

  // Add export button hover effect (scale and shadow, no color change)
  const exportBtnStyle = document.createElement('style');
  exportBtnStyle.textContent = `
  .analytics-export-btn {
    transition: transform 0.2s, box-shadow 0.2s;
  }
  .analytics-export-btn:hover {
    transform: scale(1.03);
    box-shadow: 0 2px 8px rgba(20, 211, 255, 0.15);
    background: #131C26 !important;
    color: #fff !important;
  }`;
  document.head.appendChild(exportBtnStyle);

  // Ensure progress bar CSS is present
  const progressBarStyle = document.createElement('style');
  progressBarStyle.textContent = `
  .progress-bar {
    display: none;
  }
  .progress-bar.visible {
    display: block;
  }
  `;
  document.head.appendChild(progressBarStyle);

  // Add reset function to hide panels when needed
  function resetPanels() {
    const progressBar = document.getElementById("hc-progress");
    const resultsPanel = document.getElementById("hc-results");
    
    if (progressBar) {
        progressBar.style.display = 'none';
        progressBar.classList.remove('visible');
    }
    if (resultsPanel) {
        resultsPanel.style.display = 'none';
        resultsPanel.classList.remove('visible');
    }
  }

  // Call resetPanels when initializing
  resetPanels();
})();
